#include<iostream>
#include<vector>
using namespace std;

void thomasAlgo(const vector<double>& a,const vector<double>& b,const vector<double>& c,vector<double>& d)
{
	int n = d.size();
	vector<double> c_star(n);
	vector<double> d_star(n);
	
	c_star[0] = c[0]/b[0];
	d_star[0] = d[0]/b[0];
	
	for(int i = 0; i < n; i++)
	{
		double m = 1.0/(b[i] - a[i] * c_star[i-1]);
		c_star[i] = c[i]*m;
		d_star[i] =(d[i] -a[i] *d_star[i-1]*m);
	}
	d[n-1] = d_star[n-1];
	for(int i = n-2;i >=0;i--)
	{
		d[i] = d_star[i] -c_star[i] *d[i+1];	
	}
}

int main()
{
	double lambda = 0.020875;
	double dx = 1.0;
	double dt = 1.0;
	int nx = 6;
	
	vector<double> u_old(nx,0.0);
	vector<double> u_new(nx,0.0);
	
	u_old[0] = 100.0;
	u_old[5] = 50.0;
	
	double r = lambda;
	vector<double>a(nx-2,-r/2.0);
	vector<double>b(nx-2,1.0+r);
	vector<double>c(nx-2,-r/2.0);
	
	int timesteps =1;
	for(int t = 0; t< timesteps; t++)
	{
		vector<double>d(nx-2);
		for(int i = 1; i < nx-1; i++)
		{
			d[i-1] = (1.0-r)*u_old[i] +(r/2.0) *(u_old[i-1] +u_old[i+1]);
		}
		d[0] +=r/2.0 *u_old[0] ;
		d[nx-3] +=r/2.0*u_old[nx-1];
		thomasAlgo(a,b,c,d);
		for(int i = 1; i<nx-1;i++)
		{
			u_new[i] =d[i-1];
		}
		u_new[0] = 100.0;
		u_new[nx-1] = 50.0;
		u_old = u_new;
		
	}
	cout<<"u(1,1) ="<<u_new[1]<<endl;
	cout<<"u(2,1) ="<<u_new[2]<<endl;
	cout<<"u(3,1) ="<<u_new[3]<<endl;
	cout<<"u(4,1) ="<<u_new[4]<<endl;
	
	return 0;
	
}
